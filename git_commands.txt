-----------------------------------------------------------
Commits

# squash commits:
* git rebase -i HEAD~3

#  find all commits where commit message contains given word
* git log --grep=INA-1160

# search the commit contents
* git log -Sword

# search for deleted line containing 'string'
* git log -S string /path/to/file

# search for a string
git log -p | grep STRING

# pushing to remote:
* git push remote_server INA-1368:florin

# add file to last commit
* git commit --amend -C HEAD

# modify last commit's message
* git commit --amend

# change a commit (not the last one):
* git rebase --interactive 'bbc643cd^'
* select "edit"
* do the changes
* git commit --all --amend --no-edit
* git rebase --continue

-----------------------------------------------------------
Branches

# sort local branches after commit date
git for-each-ref --sort=-committerdate refs/heads
git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'

# see remote branches:
* git ls-remote --heads gitolite@git.repo.com:florin

# fetch remote branch
git fetch origin INA-896:INA-896
git fetch janick ina-2727:janick_ina-2727

# set up to track local branch 
git branch --set-upstream mihai/qnmaster

# show tracked branches
git branch -vv

#fetch from origin and rebase local work on it
git pull --rebase

# setting local branch to match exactly the remote one
git fetch origin
git reset --hard origin/master


# transplant a branch based on one branch to another, to pretend that you forked the branch from the latter branch
git rebase --onto <correct_branch> <wrong_branch> ALPS-3850_snmp_trap_when_user_is_blocked

# fetch remote branch and track it
git checkout --track origin/branch

# rebase on branch with conflicts (instead of cherry-pick):
git rebase --i HEAD~2
change the sha of the commit with the new one

-------------------------------------------------
Misc

# revert chunks from file
git checkout -p /path/to/file

# revert chunks from a file in the last commit
git reset --soft HEAD^
git reset HEAD /path/to/file
git checkout -p /path/to/file

# create a patch:
git format-patch feature/qtalk  --stdout > /tmp/patch.txt
git diff > mypatch.patch

# apply a patch
git apply --stat fix_empty_poster.patch


# search all git repositories from a dir
find . -name .git -type d -prune

# see if a branch contains a commit
git branch --commit SHA

# Undo git reset
git reset 'HEAD@{1}'

